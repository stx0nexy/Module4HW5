// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Module4HW5.Data;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Module4HW5.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20221129140752_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseHiLo(modelBuilder, "EntityFrameworkHiLoSequence");

            modelBuilder.HasSequence("EntityFrameworkHiLoSequence")
                .IncrementsBy(10);

            modelBuilder.Entity("Module4HW5.Data.Entities.CategoryEntity", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("CategoryID"));

                    b.Property<bool?>("Active")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.CustomersEntity", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("CustomerID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillingAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillingCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillingCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillingPostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("BillingRegion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Building")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardExpMo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CardExpYr")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Class")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreditCard")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CreditCardTypeID")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("DateEntered")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("Room")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("ShipAddress")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShipCity")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShipCountry")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShipPostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ShipRegion")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("VoiceMail")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("CustomerID");

                    b.ToTable("Customers");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.OrderDetailsEntity", b =>
                {
                    b.Property<int>("OrderDetailID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("OrderDetailID"));

                    b.Property<DateTime?>("BillDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fulfilled")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("IDSKU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("OrderID")
                        .HasColumnType("integer");

                    b.Property<int?>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int?>("Price")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<int?>("ProductID")
                        .HasColumnType("integer");

                    b.Property<int?>("Quantity")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<DateTime?>("ShipDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Total")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("OrderDetailID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderDetails");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.OrdersEntity", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("OrderID"));

                    b.Property<int?>("CustomerID")
                        .HasColumnType("integer");

                    b.Property<string>("Deleted")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ErrLoc")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ErrMsg")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Freight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fulfilled")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("OrderDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("OrderNumber")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("Paid")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("PaymentDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("PaymentID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("RequiredDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("SalesTax")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime?>("ShipDate")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<int?>("ShipperID")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("Timestamp")
                        .IsRequired()
                        .HasColumnType("timestamp with time zone");

                    b.Property<bool?>("TransactStatus")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("PaymentID");

                    b.HasIndex("ShipperID");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.PaymentEntity", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("PaymentID"));

                    b.Property<bool?>("Allowed")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("PaymentType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("PaymentID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.ProductsEntity", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("ProductID"));

                    b.Property<string>("AvailableColors")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("AvailableSize")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("integer");

                    b.Property<string>("Color")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrentOrder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Discount")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("DiscountAvailable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("IDSKU")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<string>("MSRP")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Note")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Picture")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductAvailable")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ProductName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("QuantityPerUnit")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Ranking")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ReorderLevel")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SKU")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Size")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("SupplierID")
                        .HasColumnType("integer");

                    b.Property<string>("UnitPrice")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitWeight")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitsInStock")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("UnitsOnOrder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("VendorProductID")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("ProductID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("SupplierID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.ShippersEntity", b =>
                {
                    b.Property<int>("ShipperID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("ShipperID"));

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("ShipperID");

                    b.ToTable("Shippers");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.SuppliersEntity", b =>
                {
                    b.Property<int>("SupplierID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseHiLo(b.Property<int>("SupplierID"));

                    b.Property<string>("Address1")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Address2")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CompanyName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactFName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactLName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("ContactTitle")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("CurrentOrder")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int?>("CustomerID")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.Property<bool?>("DiscountAvailable")
                        .IsRequired()
                        .HasColumnType("boolean");

                    b.Property<string>("DiscountType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Fax")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Logo")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PaymentMethods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("PostalCode")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("SizeURL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("State")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TypeGoods")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("URL")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("SupplierID");

                    b.ToTable("Suppliers");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.OrderDetailsEntity", b =>
                {
                    b.HasOne("Module4HW5.Data.Entities.OrdersEntity", "OrdersEntity")
                        .WithMany("OrderDetailsEntities")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Module4HW5.Data.Entities.ProductsEntity", "ProductsEntity")
                        .WithMany("OrderDetailsEntities")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("OrdersEntity");

                    b.Navigation("ProductsEntity");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.OrdersEntity", b =>
                {
                    b.HasOne("Module4HW5.Data.Entities.CustomersEntity", "CustomersEntity")
                        .WithMany("OrdersEntities")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Module4HW5.Data.Entities.PaymentEntity", "PaymentEntity")
                        .WithMany("OrdersEntities")
                        .HasForeignKey("PaymentID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Module4HW5.Data.Entities.ShippersEntity", "ShippersEntity")
                        .WithMany("OrdersEntities")
                        .HasForeignKey("ShipperID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CustomersEntity");

                    b.Navigation("PaymentEntity");

                    b.Navigation("ShippersEntity");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.ProductsEntity", b =>
                {
                    b.HasOne("Module4HW5.Data.Entities.CategoryEntity", "CategoryEntity")
                        .WithMany("ProductsEntities")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Module4HW5.Data.Entities.SuppliersEntity", "SuppliersEntity")
                        .WithMany("ProductsEntities")
                        .HasForeignKey("SupplierID")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.Navigation("CategoryEntity");

                    b.Navigation("SuppliersEntity");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.CategoryEntity", b =>
                {
                    b.Navigation("ProductsEntities");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.CustomersEntity", b =>
                {
                    b.Navigation("OrdersEntities");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.OrdersEntity", b =>
                {
                    b.Navigation("OrderDetailsEntities");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.PaymentEntity", b =>
                {
                    b.Navigation("OrdersEntities");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.ProductsEntity", b =>
                {
                    b.Navigation("OrderDetailsEntities");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.ShippersEntity", b =>
                {
                    b.Navigation("OrdersEntities");
                });

            modelBuilder.Entity("Module4HW5.Data.Entities.SuppliersEntity", b =>
                {
                    b.Navigation("ProductsEntities");
                });
#pragma warning restore 612, 618
        }
    }
}
